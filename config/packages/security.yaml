security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        App\Entity\User:
            algorithm: bcrypt
            cost: 15
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\AuthentiAuthenticator
                - App\Security\AppCustomAuthenticator

            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    #security role for paths
    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER
        ROLE_SUPERADMIN:
            - ROLE_ADMIN
            - ROLE_MODERATOR
    #gestion des accès
    access_control:
        #Accès dashboard -> ROLE_ADMIN
        - { path: ^/dashboard, roles: ROLE_ADMIN }
        # - { path: ^/dashboard/category, roles: ROLE_ADMIN }

        #Differents accès du site -> ROLE_USER
        - { path: ^/user, roles: ROLE_USER }
        - { path: ^/comment, roles: ROLE_USER }
        - { path: ^/comment/response/, roles: ROLE_USER }
        - { path: ^/post/actions, roles: ROLE_USER }
        - { path: ^/creation-posts, roles: ROLE_USER }
        - { path: ^/creation-posts/add, roles: ROLE_USER }
        - { path: ^/modification-posts, roles: ROLE_USER }
        - { path: ^/modification-post/upload, roles: ROLE_USER }
        - { path: ^/modification-post/delete, roles: ROLE_USER }
        - { path: ^/reset-password, roles: ROLE_USER }
        - { path: ^/logout, roles: ROLE_USER }
        - { path: ^/user/edit, roles: ROLE_USER }      


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
